import numpy as np

def AUT_1999_1_PPMD():
    numactors = 4
    numpolicies = 8
    thepower = np.array([65, 52, 52, 14])
    thepolicy = np.array([[0.375,0.3375,0.54375,0.666665,0.515625,0.446875,0.428125,0.4666665],
                          [0.69375,0.8375,0.696665,0.425,0.47,0.925,0.656665,0.815625],
                          [0.734375,0.815625,0.628125,0.3066665,0.3,0.68125,0.52,0.46875],
                          [0.29375,0.19375,0.221875,0.45,0.5875,0.184375,0.2933335,0.446875]])
    thepolicy = np.rint(thepolicy)
    
    thesalience = np.array([[0.71875,0.6125,0.584375,0.586665,0.55625,0.64375,0.54375,0.58],
                             [0.626665,0.603125,0.503335,0.492857,0.590625,0.9,0.63,0.65625],
                             [0.753125,0.615625,0.63125,0.713335,0.64375,0.665625,0.54,0.609375],
                             [0.61875,0.84375,0.903125,0.533335,0.5875,0.84375,0.69,0.565625]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions

def BEL_2003_1_PPMD():
    numactors = 10
    numpolicies = 9
    thepower = np.array([25, 25, 24, 23, 21, 18, 8, 4, 1, 1])
    thepolicy = np.array([[0.819565,0.352174,0.802175,0.402174,0.263889,0.64318,0.83409,0.3735295,0.405],
                           [0.247619,0.238095,0.52857,0.65238,0.34,0.2738095,0.17,0.3194445,0.4026315],
                           [0.7125,0.385,0.72,0.633335,0.192857,0.486842,0.744735,0.359375,0.4117645],
                           [0.3652175,0.2326085,0.4363635,0.50652,0.364706,0.2613635,0.3,0.286111,0.4204545],
                           [0.54565,0.734785,0.60238,0.315909,0.296875,0.529545,0.55476,0.317647,0.3342105],
                           [0.715,0.95,0.75,0.1190475,0.733335,0.991305,0.65,0.845835,0.791665],
                           [0.468421,0.673685,0.530555,0.705265,0.2653845,0.3842105,0.4911765,0.31,0.3382355],
                           [0.2309525,0.142857,0.1238095,0.62619,0.51,0.0925,0.245238,0.211111,0.338889],
                           [0.754545,0.86,0.783335,0.6625,0.675,0.960525,0.67778,0.9,0.885715],
                           [0.59375,0.62,0.6,0.1421055,0.55909,0.635295,0.583335,0.4384615,0.492857]])
    
    thesalience = np.array([[0.836955,0.634785,0.67174,0.591305,0.605555,0.672725,0.838635,0.5,0.5925],
                            [0.75238,0.659525,0.60238,0.666665,0.573335,0.685715,0.8175,0.525,0.578945],
                            [0.7475,0.5775,0.595,0.557895,0.642855,0.61842,0.76316,0.48125,0.55294],
                            [0.72826,0.70435,0.672725,0.50652,0.52941,0.661365,0.725,0.51316,0.570455],
                            [0.661365,0.76087,0.585715,0.7,0.514705,0.597725,0.6725,0.544445,0.571055],
                            [0.522725,0.847725,0.3225,0.870455,0.3933335,0.98913,0.4775,0.490625,0.580555],
                            [0.55,0.721055,0.566665,0.63611,0.535715,0.594735,0.65294,0.56,0.6],
                            [0.69,0.75476,0.938095,0.55,0.573335,0.8725,0.76,0.53889,0.569445],
                            [0.411111,0.796665,0.25,0.745835,0.3666665,0.96,0.427778,0.520835,0.692855],
                            [0.467647,0.58158,0.367857,0.91316,0.4115385,0.661765,0.4833335,0.47,0.546665]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions

def BUL_2001_1_PPMD():
    numactors = 4
    numpolicies = 12
    thepower = np.array([120, 51, 48, 21])
    thepolicy = np.array([[0.56818,0.327778,0.75909,0.95,0.7,0.2545455,0.3727275,0.59,0.33,0.572725,0.55909,0.605555],
                          [0.61818,0.3444445,0.822725,0.99,0.64091,0.736365,0.3227275,0.4727275,0.3545455,0.4227275,0.240909,0.490909],
                          [0.3272725,0.477778,0.455,0.82778,0.577275,0.1136365,0.68182,0.54091,0.595455,0.80909,0.722725,0.527275],
                          [0.4954545,0.57222,0.61,0.895,0.68182,0.3227275,0.365,0.605,0.4,0.75,0.83182,0.575]])
    thepolicy = np.rint(thepolicy)
    
    thesalience = np.array([[0.663635,0.4,0.82,0.89,0.481818,0.58,0.70909,0.74,0.6,0.545455,0.52,0.67],
                             [0.695455,0.45,0.855,0.97,0.504545,0.63182,0.777275,0.76818,0.677275,0.68182,0.745455,0.772725],
                             [0.713635,0.377778,0.7,0.81,0.536365,0.672725,0.695455,0.64,0.577275,0.409091,0.7,0.67],
                             [0.627275,0.33125,0.72222,0.833335,0.45,0.55,0.72222,0.6,0.47,0.3555555,0.79091,0.633335]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
    
def cz_2006_1_CHES():
    
    numactors = 5
    numpolicies = 11
    thepower = np.array([81, 74, 26, 13, 6])
    thepolicy = np.array([[0.412857143,0.8,0.833,0.767,0.44,0.38,0.28,0.525,0.32,0.65,0.5],
                          [0.84,0.271,0.4,0.35,0.52,0.36,0.2,0.525,0.34,0.525,0.45],
                          [0.357142857,0.05,0.117,0.05,0.675,0.475,0.08,0.5,0.36,0.575,0.5],
                          [0.821428571,0.5,0.583,0.483,0.7,0.76,0.68,0.45,0.74,0.425,0.62],
                          [0.892857143,0.567,0.617,0.567,0.24,0.3,0.2,0.475,0.45,0.4,0.34]])
    thepolicy = np.rint(thepolicy)
    
    thesalience = np.array([[0.75,0.817,0.833,0.48,0.54,0.36,0.18,0.3,0.24,0.375,0.225],
                          [0.7933334,0.583,0.65,0.72,0.48,0.38,0.2,0.375,0.24,0.5,0.35],
                          [0.5833333,0.617,0.633,0.94,0.45,0.3,0.42,0.275,0.3,0.375,0.5],
                          [0.75,0.633,0.667,0.58,0.72,0.72,0.76,0.45,0.66,0.45,0.56],
                          [0.7933334,0.583,0.667,0.46,0.72,0.68,0.28,0.475,0.38,0.575,0.72]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
    
def DEU_2002_1_PPMD():
    numactors = 5
    numpolicies = 8
    thepower = np.array([251, 248, 55, 47, 2])
    
    thepolicy = np.array([[0.466146,0.363158,0.54684,0.585395,0.277222,0.3826315,0.3904495,0.402247],
                          [0.72,0.795745,0.72553,0.4252875,0.3292135,0.731185,0.53161,0.538635],
                          [0.55103,0.118421,0.1594735,0.268182,0.3297755,0.133684,0.2,0.347093],
                          [0.93564,0.264516,0.837765,0.2958825,0.3339745,0.3934785,0.3957315,0.497561],
                          [0.1494565,0.2434785,0.456818,0.68077,0.71111,0.2573035,0.25137,0.534125]])
    thepolicy = np.rint(thepolicy)

    thesalience = np.array([[0.795315,0.59263,0.635265,0.4931035,0.63889,0.65316,0.563635,0.55899],
                          [0.80851,0.739785,0.618085,0.528235,0.635225,0.748385,0.568605,0.588635],
                          [0.658245,0.86,0.90316,0.570115,0.667415,0.855265,0.66628,0.57151],
                          [0.93617,0.658065,0.63587,0.606025,0.575,0.617035,0.542685,0.564635],
                          [0.78371,0.55824,0.469101,0.4253245,0.630135,0.56517,0.4527395,0.404762]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
    
def DNK_2005_1_CHES():
    
        
    numactors = 8
    numpolicies = 11
    thepower = np.array([52, 47, 24, 18, 17, 11, 6, 4])
    thepolicy = np.array([[0.872857143,0.48,0.76,0.58,0.6,0.28,0.2,0.76,0.475,0.45,0.55],
                          [0.825714286,0.3,0.5,0.32,0.6,0.36,0.2,0.66,0.233,0.55,0.575],
                          [0.332857143,0.34,0.58,0.38,0.88,0.64,0.48,0.92,0.433,0.65,0.8],
                          [0.888571429,0.68,0.76,0.7,0.8,0.52,0.32,0.76,0.333,0.625,0.6],
                          [0.952857143,0.6,0.74,0.58,0.22,0.12,0.16,0.24,0.167,0.45,0.275],
                          [0.54,0.18,0.34,0.24,0.22,0.14,0.14,0.2,0.367,0.45,0.275],
                          [0.301428571,0.1,0.18,0.06,0.16,0.1,0.2,0.1,0.2,0.45,0.225],
                          [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33	]])
    thepolicy = np.rint(thepolicy)
    
    thesalience = np.array([[0.4433333,0.66,0.58,0.48,0.54,0.4,0.424,0.775,0.325,0.45,0.65],
                          [0.4066667,0.62,0.4,0.72,0.48,0.325,0.375,0.65,0.275,0.3,0.6],
                          [0.52,0.62,0.36,0.62,0.74,0.525,0.575,0.975,0.125,0.2,0.925],
                          [0.4433333,0.72,0.66,0.52,0.68,0.45,0.425,0.75,0.125,0.225,0.65],
                          [0.52,0.7,0.64,0.48,0.76,0.6,0.425,0.875,0.275,0.325,0.8],
                          [0.4433333,0.62,0.4,0.78,0.68,0.6,0.424,0.775,0.125,0.45,0.725],
                          [0.5566667,0.58,0.32,0.86,0.7,0.625,0.45,0.775,0.125,0.475,0.775],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	]])
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.75
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
    
def est_2007_1_CHES():
    numactors = 6
    numpolicies = 10
    thepower = np.array([31, 29, 19, 10, 6, 6])
    
    thepolicy = np.array([[0.881428571,0.8,0.85,0.84,0.6,0.6,0.65,0.575,0.32,0.7],
                          [0.618571429,0.24,0.375,0.28,0.56,0.5,0.525,0.45,0.5,0.28],
                          [0.881428571,0.58,0.675,0.7,0.76,0.65,0.575,0.675,0.4,0.76],
                          [0.685714286,0.26,0.4,0.34,0.48,0.375,0.525,0.425,0.36,0.34],
                          [0.595714286,0.32,0.375,0.42,0.62,0.6,0.525,0.625,0.7,0.5],
                          [0.8351643,0.454545,0.5,0.466667,0.336364,0.3,0.277778,0.5,0.46,0.45]])
    thepolicy = np.rint(thepolicy)

    thesalience = np.array([[0.61,0.825,0.767,0.85,0.55,0.25,0.3,0.475,0.45,0.767],
                          [0.4433333,0.725,0.533,0.7,0.45,0.275,0.125,0.4,0.575,0.75],
                          [0.61,0.525,0.6,0.475,0.55,0.325,0.325,0.525,0.525,0.825],
                          [0.5566667,0.675,0.467,0.55,0.375,0.375,0.15,0.375,0.5,0.6],
                          [0.4433333,0.5,0.5,0.425,0.375,0.2,0.125,0.4,0.825,0.5],
                          [0.261538,0.446154,0.309091,0.345455,0.422222,0.266667,0.111111,0.2,0.47,0.311111]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions

def FIN_1999_1_PPMD():
    numactors = 10
    numpolicies = 9
    thepower = np.array([51, 48, 46, 20, 11, 11, 10, 1,1,1])
    
    thepolicy = np.array([[0.419697,0.380303,0.62121,0.67344,0.3742425,0.3939395,0.431818,0.531665,0.342424],
                          [0.4727275,0.730305,0.56515,0.309375,0.7,0.61515,0.478788,0.713335,0.754545],
                          [0.789395,0.61515,0.751515,0.565625,0.3166665,0.64219,0.84091,0.581665,0.380303],
                          [0.2166665,0.2772725,0.4151515,0.546875,0.770315,0.3242425,0.2272725,0.53793,0.595455],
                          [0.3560605,0.151515,0.1136365,0.365625,0.65,0.1875,0.403125,0.3516665,0.4469695],
                          [0.645455,0.3296875,0.52576,0.3390625,0.353125,0.298485,0.701515,0.4966665,0.419697],
                          [0.4257575,0.92879,0.513635,0.446774,0.659675,0.572725,0.509375,0.69483,0.72121],
                          [.66,.66,.66,.66,.66,.66,.66,.66,.66	],
                          [0.4683335,0.862905,0.64231,0.45,0.75,0.941935,0.51129,0.72778,0.889655	],
                          [0.645455,0.3296875,0.52576,0.3390625,0.353125,0.298485,0.701515,0.4966665,0.419697	]])
    thepolicy = np.rint(thepolicy)

    thesalience = np.array([[0.75303,0.4772725,0.601515,0.59375,0.65909,0.516665,0.72424,0.618335,0.67879],
                          [0.651515,0.601515,0.610605,0.74844,0.68485,0.4757575,0.65469,0.66,0.745455],
                          [0.83182,0.54091,0.630305,0.54219,0.66818,0.509375,0.854545,0.608335,0.65],
                          [0.748485,0.53788,0.630305,0.571875,0.7375,0.569695,0.792425,0.64483,0.626565],
                          [0.57424,0.763635,0.91515,0.582815,0.634375,0.775,0.590625,0.658335,0.63182],
                          [0.58788,0.610605,0.6,0.614065,0.61719,0.660605,0.63182,0.563335,0.564065	],
                          [0.52344,0.898485,0.4257575,0.430645,0.5375,0.507575,0.5,0.4793105,0.572725],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [0.511665,0.79355,0.4384615,0.446154,0.648385,0.912905,0.4919355,0.594445,0.76	],
                          [0.57424,0.763635,0.91515,0.582815,0.634375,0.775,0.590625,0.658335,0.63182]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
def hun_2002_1_PPMD():
    numactors = 4
    numpolicies = 12
    thepower = np.array([81, 74, 26, 13])
    
    thepolicy = np.array([[0.52317,0.371951,0.64878,0.95125,0.597295,0.1785715,0.338095,0.357317,0.4190475,0.79125,0.4,0.418421],
                          [0.464634,0.7561,0.4536585,0.64625,0.521055,0.75238,0.790475,0.56951,0.808335,0.2775,0.665,0.630265],
                          [0.4972975,0.74625,0.52125,0.814105,0.475,0.641465,0.73,0.55921,0.8,0.241892,0.644595,0.53611],
                          [0.758535,0.115,0.85625,0.96154,0.529165,0.4182925,0.2036585,0.18875,0.240244,0.884615,0.1884615,0.2702705]])
    thepolicy = np.rint(thepolicy)

    thesalience = np.array([[0.66125,0.581705,0.695,0.94875,0.586485,0.585715,0.57625,0.655,0.595,0.475,0.58077,0.664475],
                          [0.63625,0.691465,0.70244,0.75375,0.58784,0.783335,0.82024,0.734145,0.84881,0.79,0.721795,0.598685],
                          [0.55,0.68,0.59231,0.833335,0.56111,0.68,0.76154,0.668055,0.797435,0.78421,0.67162,0.593055],
                          [0.810975,0.8875,0.8425,0.94872,0.630555,0.58875,0.59125,0.83,0.68049,0.641025,0.65658,0.705405]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
    
def lat_2006_1_CHES():
    numactors = 7
    
    thepower = np.array([23, 18, 17, 8, 6, 18, 10])
    
    thepolicy = np.array([[0.928571429,0.65,0.733,0.825,0.675,0.6,0.375,0.525,0.325,0.633,0.675],
                          [0.821428571,0.625,0.767,0.75,0.6,0.45,0.375,0.575,0.25,0.7,0.75],
                          [0.785714286,0.35,0.4,0.4,0.5,0.533,0.25,0.275,0.2,0.533,0.1],
                          [0.678571429,0.65,0.7,0.8,0.7,0.75,0.55,0.925,0.5,0.667,0.975],
                          [0.642857143,0.25,0.2,0.125,0.575,0.475,0.15,0.425,0.125,0.5,0.033],
                          [0.714285714,0.5,0.667,0.7,0.625,0.75,0.375,0.7,0.65,0.233,0.625],
                          [0.821428571,0.75,0.733,0.8,0.65,0.975,1,0.45,0.35,0.633,0.325]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.8333333,0.567,0.667,0.2,0.433,0.475,0.325,0.333,0.333,0.3,0.733],
                          [0.6666667,0.567,0.6,0.233,0.433,0.525,0.325,0.333,0.4,0.333,0.733],
                          [0.4166667,0.533,0.367,0.367,0.533,0.4,0.25,0.267,0.3,0.233,0.833],
                          [0.4166667,0.5,0.467,0.267,0.367,0.725,0.5,0.967,0.633,0.267,0.933],
                          [0.25,0.5,0.233,0.5,0.367,0.425,0.2,0.233,0.267,0.2,0.967],
                          [0.5,0.533,0.6,0.233,0.367,0.475,0.275,0.433,0.633,0.467,0.733],
                          [0.5833333,0.767,0.5,0.267,0.433,0.767,1,0.3,0.2,0.233,0.733]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.75
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def LUX_2009_1_JOP():
    numactors = 6
    
    thepower = np.array([26, 13, 9, 7, 4, 1])
    
    thepolicy = np.array([[.6710526, .75, .5, .3289474, .7105263	],
                          [.3947369, .131579, .491228, .2763158, .2368421	],
                          [.7368421, .2763158, .7763158, .4342105, .6315789	],
                          [.1578947, .0789474, .0526316, .2105263, .0394737	],
                          [.6315789, .75, .6578947, .4342105, .8684211	],
                          [.0877193, .1052632, .3157895, .6140351, .0175439	]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[.2251908, .1908397, .1755725, .1717557, .2366412	],
                          [.2072727, .2145455, .2036364, .1745455, .2	],
                          [.2145749, .2145749, .1821862, .1700405, .2186235	],
                          [.1829653, .2050473, .2365931, .1671924, .2082019	],
                          [.224, .204, .14, .168, .264	],
                          [.2532981, .182058, .1530343, .1530343, .2585752	]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def NLD_2010_1_CHES():
    numactors = 10
    
    thepower = np.array([31, 30, 24, 21, 15, 10, 10, 5, 2, 2])
    
    thepolicy = np.array([[0.5612245, 0.846154, 0.875, 0.854545, 0.790909, 0.345455, 0.272727, 0.845455, 0.790909, 0.4, 0.854545, 0.6, 0.21, 0.71	],
                          [0.7551020143, 0.346154, 0.45, 0.345455, 0.463636, 0.3, 0.345455, 0.518182, 0.509091, 0.333333, 0.454545, 0.55, 0.53, 0.4	],
                          [0.193877543, 0.566667, 0.47, 0.55, 0.936364, 0.47, 0.2, 1, 1, 0.557143, 0.81, 0.625, 0.71, 0.97	],
                          [0.7551020143, 0.6, 0.625, 0.609091, 0.709091, 0.590909, 0.772727, 0.7, 0.7, 0.76, 0.7, 0.575, 0.24, 0.6	],
                          [0.346938786, 0.138462, 0.133333, 0.127273, 0.47, 0.390909, 0.29, 0.6, 0.62, 0.4, 0.536364, 0.475, 0.72, 0.44	],
                          [0.948979586, 0.538462, 0.691667, 0.590909, 0.227273, 0.0909091, 0.154545, 0.336364, 0.272727, 0.266667, 0.381818, 0.34, 0.4, 0.31	],
                          [0.8877551286, 0.238462, 0.375, 0.281818, 0.245455, 0.136364, 0.2, 0.263636, 0.236364, 0.266667, 0.154545, 0.45, 0.56, 0.21	],
                          [0.540816343, 0.475, 0.481818, 0.44, 0.58, 0.636364, 0.9, 0.49, 0.66, 0.644444, 0.466667, 0.45, 0.428571, 0.522222	],
                          [0.4285714286, 0.66, 0.555556, 0.6625, 0.85, 0.96, 1, 0.8125, 0.85, 0.788889, 0.65, 0.475, 0.416667, 0.771429	],
                          [0.517857143, 0.357143, 0.4, 0.416667, 0.42, 0.28, 0.48, 0.35, 0.375, 0.25, 0.1625, 0.5, 0.5, 0.433333	]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.5238095, 0.746154, 0.754545, 0.681818, 0.790909, 0.527273, 0.327273, 0.745455, 0.736364, 0.344444, 0.372727, 0.285714, 0.61, 0.69	],
                          [0.5952381, 0.653846, 0.654545, 0.663636, 0.554545, 0.5, 0.354545, 0.6, 0.627273, 0.344444, 0.463636, 0.285714, 0.59, 0.58	],
                          [0.8095238, 0.583333, 0.57, 0.46, 0.872727, 0.59, 0.522222, 0.990909, 1, 0.366667, 0.26, 0.3, 0.51, 0.95	],
                          [0.547619, 0.623077, 0.61, 0.527273, 0.609091, 0.527273, 0.745455, 0.627273, 0.609091, 0.56, 0.390909, 0.3, 0.62, 0.55	],
                          [0.5714285, 0.807692, 0.790909, 0.809091, 0.545455, 0.43, 0.354545, 0.618182, 0.627273, 0.355556, 0.372727, 0.271429, 0.53, 0.53	],
                          [0.8333333, 0.638462, 0.736364, 0.590909, 0.627273, 0.690909, 0.427273, 0.6, 0.618182, 0.411111, 0.581818, 0.457143, 0.49, 0.61	],
                          [0.6428572, 0.669231, 0.618182, 0.609091, 0.636364, 0.672727, 0.381818, 0.609091, 0.627273, 0.333333, 0.881818, 0.314286, 0.51, 0.66	],
                          [0.4285715, 0.5, 0.463636, 0.5, 0.46, 0.7, 0.927273, 0.509091, 0.545455, 0.575, 0.52, 0.4, 0.4375, 0.6	],
                          [0, 0.408333, 0.32, 0.377778, 0.477778, 0.81, 1, 0.522222, 0.5375, 0.577778, 0.35, 0.385714, 0.4, 0.525	],
                          [0.2564102, 0.29, 0.2, 0.2, 0.275, 0.425, 0.271429, 0.266667, 0.266667, 0.422222, 0.8625, 0.3, 0.214286, 0.328571	]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def pol_2007_1_CHES():
    numactors = 6
    
    thepower = np.array([209, 166, 37, 31, 10, 1])
    
    thepolicy = np.array([[0.947142857,0.74,0.82,0.74,0.257,0.314,0.414,0.233,0.34,0.283	],
                          [0.5,0.26,0.26,0.18,0.943,0.971,0.943,0.667,0.8,0.7	],
                          [0.857142857,0.375,0.56,0.575,0.214,0.2,0.157,0.367,0.4,0.3],
                          [0.678571429,0.34,0.4,0.38,0.486,0.483,0.5,0.92,0.4,0.5],
                          [0.877142857,0.36,0.46,0.52,0.214,0.183,0.129,0.333,0.367,0.3],
                          [0.975714286,0.6,0.68,0.75,0.1,0.1,0.267,0.2,0.3,0.25]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.9166667,0.85,0.8,0.767,0.671,0.5,0.357,0.267,0.45,0.45],
                          [0.6266667,0.625,0.38,0.65,0.771,0.85,0.943,0.583,0.425,0.475],
                          [0.8766667,0.633,0.52,0.7,0.8,0.66,0.343,0.375,0.4,0.525],
                          [0.6266667,0.5,0.46,0.55,0.55,0.38,0.417,0.983,0.525,0.425],
                          [0.8566667,0.633,0.525,0.725,0.783,0.68,0.367,0.36,0.4,0.525],
                          [1,0.7,0.64,0.575,0.767,0.82,0.333,0.26,0.5,0.6]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def PRT_1999_1_PPMD():
    numactors = 6
    
    thepower = np.array([115, 81, 15, 15, 2, 2])
    
    thepolicy = np.array([[0.4325,0.404762,0.440476,0.3666665,0.3285715,0.3833335,0.386111,0.335	],
                          [0.725,0.7425,0.68095,0.538095,0.35,0.611905,0.53889,0.47	],
                          [0.205263,0.204762,0.295,0.3261905,0.711905,0.195,0.658335,0.73	],
                          [0.82381,0.955,0.77143,0.707145,0.509525,0.764285,0.80278,0.77	],
                          [0.255,0.088095,0.16,0.323684,0.6525,0.1309525,0.609375,0.6575	],
                          [0.25625,0.175,0.1166665,0.3235295,0.732355,0.2088235,0.6,0.583335	]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.614285,0.58158,0.611905,0.67857,0.690475,0.67,0.72778,0.709525],
                          [0.716665,0.57619,0.54524,0.640475,0.69524,0.59,0.69722,0.70476],
                          [0.72143,0.69,0.6375,0.7,0.62619,0.73158,0.64722,0.67143],
                          [0.738095,0.77,0.488095,0.592855,0.683335,0.7,0.758335,0.733335],
                          [0.614285,0.911905,0.795,0.65,0.6175,0.88,0.61875,0.55238],
                          [0.60588,0.81316,0.885715,0.691175,0.64412,0.74375,0.596155,0.6]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions

def PRT_2002_1_CHES():
    numactors = 5
    
    thepower = np.array([105,96,14,12,3])
    
    thepolicy = np.array([[0.942857143,0.62,0.7,0.56,0.64,0.66,0.622,0.6,0.543,0.525,0.514],
                          [0.985714286,0.37,0.54,0.33,0.45,0.37,0.333,0.49,0.4,0.275,0.343],
                          [0.757142857,0.77,0.8,0.72,0.81,0.91,0.911,0.79,0.743,0.663,0.657],
                          [0.542857143,0.06,0.07,0.07,0.25,0.27,0.038,0.28,0.629,0.25,0.171],
                          [0.571428571,0.06,0.06,0.07,0.18,0.05,0.133,0.09,0.213,0.3,0.086]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.6333333,0.74,0.68,0.57,0.56,0.5,0.55,0.6,0.429,0.522,0.5],
                          [0.7333333,0.77,0.61,0.6,0.51,0.52,0.46,0.6,0.414,0.556,0.571],
                          [0.5,0.81,0.76,0.48,0.7,0.63,0.84,0.77,0.543,0.489,0.686],
                          [0.5333333,0.87,0.76,0.91,0.57,0.52,0.57,0.59,0.514,0.533,0.629],
                          [0.5333333,0.87,0.76,0.9,0.8,0.88,0.57,0.775,0.543,0.511,0.829]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
    
def ROM_2008_1_CHES():
    numactors = 5
    
    thepower = np.array([115, 110, 65, 22, 4])
    
    thepolicy = np.array([[0.971428571,0.557,0.613,0.513,0.488,0.5,0.463,0.486,0.4,0.514,0.525],
                          [0.885714286,0.388,0.375,0.263,0.525,0.6,0.463,0.5,0.6,0.671,0.588],
                          [0.957142857,0.638,0.7,0.688,0.413,0.475,0.475,0.525,0.313,0.5,0.5],
                          [0.942857143,0.488,0.513,0.525,0.338,0.538,0.588,0.425,0.575,0.088,0],
                          [0.841428571,0.463,0.4,0.438,0.563,0.7,0.6,0.525,0.575,0.686,0.663]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.9333333,0.613,0.65,0.625,0.588,0.475,0.438,0.425,0.588,0.543,0.538],
                          [0.8666666,0.575,0.613,0.65,0.525,0.488,0.425,0.413,0.588,0.543,0.55],
                          [0.9333333,0.638,0.7,0.613,0.513,0.525,0.475,0.425,0.575,0.517,0.55],
                          [0.8,0.513,0.538,0.563,0.613,0.513,0.488,0.513,0.625,0.938,1],
                          [0.7,0.5,0.5,0.6,0.588,0.613,0.55,0.413,0.538,0.543,0.575]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 2
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def slovak_2010_1_CH():
    numactors = 6
    
    thepower = np.array([62, 28, 22, 15, 14, 9])
    
    thepolicy = np.array([[0.838095257,0.242857,0.242857,0.235714,0.707143,0.535714,0.35,0.569231,0.576923,0.535714,0.635714,0.607692,0.530769,0.692308],
                          [0.742857114,0.614286,0.7,0.664286,0.578571,0.557143,0.607143,0.584615,0.607692,0.35,0.628571,0.476923,0.346154,0.5],
                          [0.647619043,0.828571,0.892857,0.814286,0.3,0.2,0.207143,0.445455,0.45,0.264286,0.669231,0.363636,0.472727,0.430769],
                          [0.647619043,0.542857,0.578571,0.553846,0.778571,0.878571,0.9,0.823077,0.8,0.642857,0.625,0.530769,0.430769,0.628571],
                          [0.838095257,0.542857,0.630769,0.578571,0.523077,0.492308,0.557143,0.53,0.463636,0.538462,0.566667,0.283333,0.427273,0.114286],
                          [0.439560443,0.409091,0.358333,0.463636,0.846154,0.892857,0.642857,0.907143,0.953846,0.6,0.678571,0.75,0.75,0.992857]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.6666667,0.6,0.585714,0.671429,0.592857,0.321429,0.392857,0.292857,0.257143,0.421429,0.228571,0.338462,0.4,0.514286],
                          [0.8,0.715385,0.707143,0.657143,0.592857,0.421429,0.535714,0.307143,0.278571,0.442857,0.264286,0.392308,0.457143,0.45],
                          [0.5555556,0.884615,0.842857,0.764286,0.614286,0.65,0.528571,0.271429,0.264286,0.457143,0.278571,0.376923,0.346154,0.35],
                          [0.6444445,0.553846,0.521429,0.485714,0.742857,0.807143,0.892857,0.514286,0.55,0.585714,0.228571,0.369231,0.364286,0.585714],
                          [0.6888889,0.546154,0.478571,0.484615,0.575,0.469231,0.530769,0.4,0.408333,0.554545,0.241667,0.658333,0.3,0.9],
                          [0.4,0.307692,0.3,0.369231,0.621429,0.65,0.557143,0.635714,0.628571,0.5,0.192857,0.441667,0.521429,0.971429]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def sloven_2000_1_PP():
    numactors = 10
    
    thepower = np.array([34, 14, 11, 9, 8, 4, 4, 4, 1, 1])
    
    thepolicy = np.array([[0.42,0.233051,0.568645,0.9275,0.708475,0.2591665,0.3575,0.4166665,0.309483,0.840835,0.214407,0.520835],
                          [0.591665,0.7325,0.645835,0.849155,0.581895,0.8775,0.5425,0.4475,0.672415,0.3308335,0.63983,0.447414],
                          [0.411017,0.2677965,0.3841665,0.83729,0.548305,0.1716665,0.5475,0.445,0.3833335,0.914405,0.3163795,0.4591665],
                          [0.53305,0.78051,0.589165,0.768645,0.559165,0.695765,0.6775,0.518335,0.715255,0.268644,0.89068,0.440517],
                          [0.65,0.86695,0.735,0.845765,0.575,0.903335,0.518105,0.508335,0.755085,0.177586,0.79068,0.455],
                          [0.399138,0.516665,0.383051,0.741665,0.538985,0.2558335,0.599155,0.536665,0.55339,0.785835,0.405932,0.5125],
                          [0.504235,0.586205,0.466949,0.3375,0.522415,0.464407,0.869165,0.4784485,0.85593,0.88644,0.4310345,0.520535],
                          [0.4816665,0.2591665,0.585,0.74138,0.4398305,0.4788135,0.540515,0.3475,0.344915,0.77966,0.312069,0.411017],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.664285,0.595615,0.768965,0.92586,0.597415,0.53158,0.615515,0.66207,0.445614,0.50862,0.61293,0.635345],
                          [0.635715,0.704385,0.71909,0.885345,0.537275,0.826315,0.651725,0.773275,0.717855,0.71638,0.65965,0.688395],
                          [0.656365,0.64737,0.65877,0.84123,0.598275,0.656895,0.6307,0.636205,0.4568965,0.539655,0.59138,0.678945],
                          [0.527275,0.630355,0.622415,0.802585,0.545615,0.605265,0.745615,0.601785,0.700925,0.785345,0.814035,0.673685],
                          [0.545535,0.735965,0.755265,0.82768,0.523215,0.832455,0.694735,0.722415,0.765515,0.87845,0.70702,0.673685],
                          [0.530555,0.4535715,0.464655,0.649105,0.419643,0.601755,0.499138,0.500875,0.4535715,0.51207,0.4614035,0.424138],
                          [0.4701925,0.514035,0.51091,0.624105,0.4227275,0.572805,0.834545,0.56875,0.889655,0.54138,0.4955355,0.490351],
                          [0.4754715,0.575,0.4827275,0.74107,0.50702,0.386842,0.4385965,0.617545,0.395614,0.4181035,0.4114035,0.510525],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def SPA_2008_1_CHES():
    numactors = 10
    
    thepower = np.array([169, 154, 10, 6, 3, 2, 2, 2, 1, 1])
    
    thepolicy = np.array([[0.857142857,0.308,0.391,0.283,0.208,0.075,0.158,0.43,0.5,0.292,0.32],
                          [0.845714286,0.708,0.673,0.725,0.8,0.783,0.783,0.68,0.489,0.742,0.64],
                          [0.901428571,0.636,0.627,0.582,0.575,0.492,0.55,0.59,0.489,0.073,0.333],
                          [0.802857143,0.582,0.59,0.591,0.545,0.49,0.627,0.563,0.525,0.055,0.333],
                          [0.637142857,0.23,0.244,0.35,0.3,0.133,0.11,0.533,0.557,0.06,0.238],
                          [0.642857143,0.17,0.213,0.245,0.26,0.167,0.16,0.444,0.614,0.09,0.238],
                          [0.752857143,0.589,0.514,0.544,0.529,0.429,0.5,0.638,0.5,0.15,0.371],
                          [0.648571429,0.109,0.136,0.117,0.125,0.058,0.042,0.35,0.422,0.267,0.26],
                          [.6,.6,.6,.6,.6,.6,.6,.6,.6,.6,.6	],
                          [.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4	]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.7766666,0.708,0.464,0.642,0.73,0.736,0.5,0.65,0.2,0.767,0.633],
                          [0.6666667,0.65,0.6,0.442,0.76,0.536,0.76,0.7,0.189,0.8,0.711],
                          [0.5766667,0.645,0.545,0.458,0.66,0.473,0.51,0.633,0.233,0.967,0.733],
                          [0.4333333,0.609,0.47,0.445,0.656,0.43,0.544,0.509,0.3,0.983,0.689],
                          [0.3666666,0.62,0.433,0.51,0.675,0.544,0.463,0.57,0.288,0.991,0.775],
                          [0.37,0.65,0.525,0.55,0.638,0.52,0.388,0.5,0.338,0.95,0.75],
                          [0.48,0.575,0.486,0.411,0.6,0.425,0.388,0.709,0.288,0.93,0.788],
                          [0.4833333,0.782,0.609,0.783,0.756,0.745,0.43,0.7,0.222,0.7,0.7],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 
 
    
def SWE_2006_1_CHES():
    numactors = 7
    
    thepower = np.array([130, 97, 29, 28, 24, 22, 19])
    
    thepolicy = np.array([[0.826571429,0.222,0.5,0.244,0.511,0.289,0.211,0.478,0.4,0.588,0.4],
                          [0.882857143,0.778,0.811,0.678,0.778,0.378,0.356,0.567,0.289,0.588,0.489],
                          [0.792857143,0.711,0.722,0.622,0.622,0.333,0.367,0.556,0.678,0.25,0.467],
                          [0.857142857,0.7,0.8,0.644,0.733,0.267,0.225,0.578,0.244,0.563,0.411],
                          [0.831428571,0.689,0.7,0.567,0.733,0.722,0.778,0.5,0.544,0.475,0.478],                          
                          [0.26,0.1,0.2,0.089,0.256,0.233,0.089,0.189,0.367,0.538,0.289],
                          [0.285714286,0.256,0.389,0.256,0.278,0.322,0.156,0.233,0.478,0.388,0.278]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.3633333,0.778,0.55,0.744,0.544,0.522,0.3658,0.589,0.5,0.486,0.429],
                          [0.4833333,0.767,0.763,0.644,0.778,0.633,0.478,0.667,0.5,0.5,0.414],
                          [0.5166667,0.711,0.675,0.578,0.7,0.667,0.522,0.656,0.738,0.643,0.429],
                          [0.7266667,0.722,0.775,0.6,0.778,0.756,0.438,0.756,0.5,0.486,0.514],
                          [0.3933334,0.667,0.613,0.567,0.744,0.856,0.833,0.633,0.563,0.529,0.433],
                          [0.5466667,0.789,0.488,0.8,0.644,0.667,0.289,0.7,0.463,0.529,0.557],
                          [0.5166667,0.689,0.5,0.667,0.589,0.667,0.289,0.633,0.513,0.586,0.514]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 

     
    
def uk_2010_1_CHES():
    numactors = 10
    
    thepower = np.array([307,258,57,8,6,3,3,1,1,1])
    
    thepolicy = np.array([[0.323809529,0.7,0.735714,0.664286,0.692857,0.485714,0.575,0.757143,0.691667,0.7,0.623077,0.5,0.307692,0.525],
                          [0.685714314,0.286667,0.442857,0.335714,0.607143,0.235714,0.425,0.557143,0.383333,0.272727,0.523077,0.375,0.292308,0.333333],
                          [0.857142857,0.446667,0.578571,0.428571,0.328571,0.114286,0.3,0.371429,0.341667,0.572727,0.415385,0.208333,0.453846,0.258333],
                          [.74,.74,.74,.74,.74,.74,.74,.74,.74,.74,.74,.74,.74,.74	],
                          [0.733333314,0.269231,0.375,0.276923,0.48,0.309091,0.36,0.372727,0.457143,0.55,0.4,0.108333,0.575,0.3375],
                          [0.714285714,0.246154,0.354545,0.24,0.45,0.333333,0.344444,0.388889,0.442857,0.671429,0.344444,0.125,0.625,0.383333],
                          [.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33,.33	],
                          [0.670329643,0.2,0.230769,0.207692,0.2,0.0846154,0.190909,0.25,0.266667,0.4875,0.0615385,0.18,0.79,0.222222	],
                          [.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4	],
                          [.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4	]])
    
    thepolicy = np.rint(thepolicy)
    numpolicies = len(thepolicy[0])
    
    thesalience = np.array([[0.5555556,0.714286,0.716667,0.523077,0.653846,0.541667,0.354545,0.746154,0.661538,0.5,0.433333,0.491667,0.508333,0.472727],
                          [0.3777778,0.728571,0.5,0.553846,0.553846,0.441667,0.218182,0.584615,0.5,0.275,0.392308,0.491667,0.516667,0.445455],
                          [0.5777778,0.7,0.508333,0.584615,0.638462,0.641667,0.209091,0.569231,0.492308,0.354545,0.530769,0.583333,0.55,0.418182],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [0.452381,0.708333,0.4,0.527273,0.488889,0.4875,0.266667,0.433333,0.4375,0.388889,0.485714,0.818182,0.266667,0.428571],
                          [0.4545454,0.7,0.366667,0.6,0.5,0.528571,0.271429,0.5125,0.471429,0.4,0.522222,0.833333,0.311111,0.442857],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [0.4761905,0.65,0.445455,0.555556,0.533333,0.645455,0.2,0.427273,0.4,0.277778,0.9,0.622222,0.49,0.5625],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	],
                          [.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5	]])
    
    for i in range(len(thesalience)):
        thesalience[i,:] = thesalience[i,:]/sum(thesalience[i,:])
    
    nbiggest = 3
    numdivisions = 10
    learningrate = 0.5
    thereversion = 0.1
    return numactors, numpolicies, thepower, thepolicy, thesalience, learningrate, thereversion, nbiggest, numdivisions
 

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    